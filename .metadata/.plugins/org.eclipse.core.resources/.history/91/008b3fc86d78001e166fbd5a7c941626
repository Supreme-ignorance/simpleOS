#include "app_service.h"
#include "device_driver.h"

#define TRY do{ jmp_buf ex_buf__; if( !setjmp(ex_buf__) ){
#define CATCH } else {
#define ETRY } }while(0)
#define THROW longjmp(ex_buf__, 1)

static int curAppNum = 0;
unsigned int ram[] = {RAM_APP0, RAM_APP1};
unsigned int sizeApp[] = {SIZE_APP0, SIZE_APP1};
unsigned int stackBase[] = {STACK_BASE_APP0, STACK_BASE_APP1};

if(x == '1')
		{
			Uart_Printf("\nAPP0 RUN\n", x);
			SetTransTable(RAM_APP0, (RAM_APP0+SIZE_APP0-1), RAM_APP0, RW_WBWA);
			SetTransTable(STACK_LIMIT_APP0, STACK_BASE_APP1-1, STACK_LIMIT_APP0, RW_WBWA);
			CoInvalidateMainTlb();
			Run_App(RAM_APP0, STACK_BASE_APP0);
		}

		if(x == '2')
		{
			Uart_Printf("\nAPP1 RUN\n", x);
			SetTransTable(RAM_APP0, (RAM_APP0+SIZE_APP1-1), RAM_APP1, RW_WBWA);
			SetTransTable(STACK_LIMIT_APP1, STACK_BASE_APP1-1, STACK_LIMIT_APP1, RW_WBWA);
			CoInvalidateMainTlb();
			Run_App(RAM_APP0, STACK_BASE_APP1);
		}
int runApp(int index)
{
	int result = 0;

	Uart_Printf("\nAPP%d INIT\n", index);
	SetTransTable(RAM_APP0, (RAM_APP0+sizeApp[index]-1), RAM_APP0, RW_WBWA);
	SetTransTable(STACK_LIMIT_APP0, STACK_BASE_APP1-1, STACK_LIMIT_APP0, RW_WBWA);
	CoInvalidateMainTlb();
	Run_App(ram[index], stackBase[index]);

	return result;
}
int getCurAppNum(void)
{
	return curAppNum;
}
int setCurAppNum(int num)
{
	curAppNum = num;

	return curAppNum;
}
